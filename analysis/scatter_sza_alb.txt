sfc_alb = np.array([0.11, 0.31, 0.51])
inter_a_list = np.array([[0.032, 0.036, 0.042], 
                         [0.037, 0.045, 0.047],
                         [0.036, 0.065, 0.055]])

slope_a_list = np.array([[0.283, 0.021, 0.011],
                         [0.201, 0.048, 0.026],
                         [0.197, 0.145, 0.058]])

inter_e_list = np.array([[0.87, 1.04, 0.98], 
                         [0.96, 0.78, 0.85],
                         [1.29, 0.52, 0.68]])

slope_e_list = np.array([[1.29, 5.63, 5.29],
                         [1.44, 5.64, 5.04],
                         [0.86, 2.44, 4.25]])


fig, ((ax1, ax2),
       (ax21, ax22)) = plt.subplots(2, 2, figsize=(12, 10), sharex=False)
fig.tight_layout(pad=5.0)
label_size = 16
tick_size = 12


ax1.scatter(sfc_alb, slope_a_list[0], s=50, label='sza=30')
ax1.scatter(sfc_alb, slope_a_list[1], s=50, label='sza=48.5')
ax1.scatter(sfc_alb, slope_a_list[2], s=50, label='sza=60')
#ax.hist2d(plot_x, plot_y, bins=150, norm=LogNorm(), cmap=light_jet)
ax2.scatter(sfc_alb, inter_a_list[0], s=50, label='sza=30')
ax2.scatter(sfc_alb, inter_a_list[1], s=50, label='sza=48.5')
ax2.scatter(sfc_alb, inter_a_list[2], s=50, label='sza=60')


ax21.scatter(sfc_alb, slope_e_list[0], s=50, label='sza=30')
ax21.scatter(sfc_alb, slope_e_list[1], s=50, label='sza=48.5')
ax21.scatter(sfc_alb, slope_e_list[2], s=50, label='sza=60')
#ax.hist2d(plot_x, plot_y, bins=150, norm=LogNorm(), cmap=light_jet)
ax22.scatter(sfc_alb, inter_e_list[0], s=50, label='sza=30')
ax22.scatter(sfc_alb, inter_e_list[1], s=50, label='sza=48.5')
ax22.scatter(sfc_alb, inter_e_list[2], s=50, label='sza=60')

"""val_mask = ~(np.isnan(value_avg) | np.isnan(value_std) | np.isinf(value_avg) | np.isinf(value_std))
#print(value_avg[val_mask])
#print(value_std[val_mask])
temp_r2 = 0
for cld_max in np.arange(3, 15, 0.5):
    cld_val = cld_list[val_mask]
    xx = cld_val[cld_val<=cld_max]
    yy = value_avg[val_mask][cld_val<=cld_max]
    popt, pcov = curve_fit(func, xx, yy, bounds=([-2, 0.], [2, 10,]),
                           p0=(0.1, 0.7),
                           maxfev=3000,
                           #sigma=value_std[val_mask], 
                           #absolute_sigma=True,
                          )
    residuals = yy - func(xx, *popt)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((yy-np.mean(yy))**2)
    r_squared = 1 - (ss_res / ss_tot)

    if r_squared > temp_r2:
        temp_r2 = r_squared
    else:
        break

plot_xx = np.arange(0, cld_list.max()+0.75, 0.5)
ax.plot(plot_xx, func(plot_xx, *popt), '--', color='limegreen', 
          label='fit: a=%5.3f\n     b=%5.3f' % tuple(popt), linewidth=3.5)
print('-'*15)
print(f'E-folding dis: {1/popt[1]}')"""
#ax.plot(cld_list, func(cld_list, 1, 2), '--', color='green',)
#ax.plot(cld_list, func(cld_list, 0.2, 1), '--', color='cyan',)
ax1.legend()
ax2.legend()
ax21.legend()
ax22.legend()

ax1.set_ylabel('a', fontsize=label_size)
ax2.set_ylabel('a', fontsize=label_size)

ax21.set_ylabel('e-folding distance (km)', fontsize=label_size)
ax22.set_ylabel('e-folding distance (km)', fontsize=label_size)

ax1.set_xlabel('surface albedo', fontsize=label_size)
ax2.set_xlabel('surface albedo', fontsize=label_size)
ax21.set_xlabel('surface albedo', fontsize=label_size)
ax22.set_xlabel('surface albedo', fontsize=label_size)

ax1.set_title('coefficient a for slope', fontsize=label_size)
ax2.set_title('coefficient a for intercept', fontsize=label_size)
ax21.set_title('e-folding distance for slope', fontsize=label_size)
ax22.set_title('e-folding distance for intercept', fontsize=label_size)

plt.show()